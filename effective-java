
1、考虑使用静态工厂方法代替构造方法【建议】
  优点
  ：
      a)工厂方法可以有自己的名字，会有语义的变化，方便阅读
      b)工厂方法不用每次被调用就返回一个新的对象
      c)工厂方法可以返回任何子类的对象
      java.util.Collections类的各种静态方法
      public static <T> Collection<T> unmodifiableCollection(Collection<? extends T> c) {
        return new UnmodifiableCollection<>(c);
      }
      d)返回的对象可以随调用的参数的同步而有不同的变化
       例：EnumSet的方法，根据数据返回不同的对象，64个以下的RegularEnumSet，64以上的JumboEnumSet实现
      /**
     * Creates an empty enum set with the specified element type.
     *
     * @param <E> The class of the elements in the set
     * @param elementType the class object of the element type for this enum
     *     set
     * @return An empty enum set of the specified type.
     * @throws NullPointerException if <tt>elementType</tt> is null
     */
    public static <E extends Enum<E>> EnumSet<E> noneOf(Class<E> elementType) {
        Enum<?>[] universe = getUniverse(elementType);
        if (universe == null)
            throw new ClassCastException(elementType + " not an enum");

        if (universe.length <= 64)
            return new RegularEnumSet<>(elementType, universe);
        else
            return new JumboEnumSet<>(elementType, universe);
    }
    e)类中包含的方法不一定需要存在
      例如：jdbc一套的框架，只定义接口，实现留给客户端，服务提供框架一般需要满足3点，服务接口，服务注册API，服务获取API，以及可选的服务提供接口
      
  缺点
    a)没有public或者protected方法，不能被子类实例化
    b)不容易被编码者找到该方法
  工厂方法取名大概的列表：
    from, to, valueOf, intance/getInstance, create/newInstance, getType, newType, type等
    
2、当构造方法有多个参数时，考虑使用builder方法【建议】
  构造方法和静态工厂方法都有个缺点，不能在有多个可选参数时良好的工作，
  例：
   NutritionFacts cocaCola = new NutritionFacts();
   cocaCola.setServingSize(240);
   cocaCola.setServings(8);
   cocaCola.setCalories(100);
   cocaCola.setSodium(35);
   cocaCola.setCarbohydrate(27);
  上述对象初始化看着似乎比较简单，而且易读，但是会造成对象构造过程中出现状态不一致的情况
  NutritionFacts cocaCola = new NutritionFacts.Builder(240, 8)
           .calories(100).sodium(35).carbohydrate(27).build();
           
  类继承中的builder例子
  // Builder pattern for class hierarchies
public abstract class Pizza {
public enum Topping { HAM, MUSHROOM, ONION, PEPPER, SAUSAGE } final Set<Topping> toppings;
abstract static class Builder<T extends Builder<T>> { EnumSet<Topping> toppings = EnumSet.noneOf(Topping.class); public T addTopping(Topping topping) {
            toppings.add(Objects.requireNonNull(topping));
            return self();
}
         abstract Pizza build();
         // Subclasses must override this method to return "this"
         protected abstract T self();
      }
      Pizza(Builder<?> builder) {
         toppings = builder.toppings.clone(); // See Item 50
      }
}
  build模式一般在构造函数超过1手的时候比较适合采用

3、单例模式的构造【强制】
  a)私有构造方法加静态初始化
   // Singleton with static factory
  public class Elvis {
  private static final Elvis INSTANCE = new Elvis(); private Elvis() { ... }
  public static Elvis getInstance() { return INSTANCE; }
       public void leaveTheBuilding() { ... }
   }
 
  b)定义一个只有单个元素的Enum
  // Enum singleton - the preferred approach
   public enum Elvis {
       INSTANCE;
       public void leaveTheBuilding() { ... }
   }

 4、不需要实例化的类，添加一个私有的构造方法【强制】
  例:java.lang.Math
  
 5、宁愿依赖注入，不选硬编码【建议】
    简单的将依赖的资源传入构造方法
    // Dependency injection provides flexibility and testability
    public class SpellChecker {
       private final Lexicon dictionary;
       public SpellChecker(Lexicon dictionary) { this.dictionary = Objects.requireNonNull(dictionary);
        }
       public boolean isValid(String word) { ... }
       public List<String> suggestions(String typo) { ... }
    }
    上面的方法可以使用，但相对比较僵硬，如果传入一个工厂方法会很好
    Mosaic create(Supplier<? extends Tile> tileFactory) { ... }
    有多个资源和依赖，可以考虑static factory和builder的方式,将能获得灵活性、可重用、可测试的好处
    
  6、避免创建不必要的对象
     例：下面简单的对象创建，如果是在循环内部，会造成大量的新对象的创建
     String s = new String("bikini"); // DON'T DO THIS!
     对于可重用的、创建代价高昂的对象，
     
  7、消除废弃的对象引用
     无意识的保留废弃的对象引用，会出现隐藏的问题，
      a)它所引用的对象无法被gc所回收，并且废弃对象关联的所有对象同样如此
      b)废弃的引用可能被其它对象再次错误的引用
    解决方法：
     a)可以置为null，使gc能够回收这部分对象，并且错误的引用能够快速失败，
     何时去做这种操作，当一个类能够管理自己的内存时，就应该警惕这种内存泄露
     b)另一种常见的情况是缓存，当对象被缓存时，自身已经废弃了，缓存中的对象可能会被忘记，WeakHashMap可以达到这种效果，当map中的key的引用的对象
     已经废弃，map中的对象也将被释放
     c)
     
  8、避免使用finalizers和cleaners
    这两个方法的执行不能立刻执行，会带来不稳定和不可预期的结果
    
  9、try-with-resource优先于try-finally
    // try-with-resources - the the best way to close resources!
    static String firstLineOfFile(String path) throws IOException {
       try (BufferedReader br = new BufferedReader(
               new FileReader(path))) {
           return br.readLine();
     } }
    
    // try-with-resources on multiple resources - short and sweet
       static void copy(String src, String dst) throws IOException {
         try (InputStream   in = new FileInputStream(src);
              OutputStream out = new FileOutputStream(dst)) {
            byte[] buf = new byte[BUFFER_SIZE];
            int n;
            while ((n = in.read(buf)) >= 0)
            out.write(buf, 0, n);
            }
        }
     The resulting code is shorter and clearer, and the exceptions that it generates are more useful. 
     The try- with-resources statement makes it easy to write correct code using resources that must be closed, 
     which was practically impossible using try-finally.
     
 II.所有对象共有的方法
  10.重写equals方法时需要遵守一般的规则
    重写equals方法时，必须遵守它的一般约定。
    反身性:对于任何非空的引用值x,x.equals(x)必须返回true
    对称性:对于任何非空的引用值x和y，当且仅当y.equals(x)返回true时，x.equals(y)必须返回true
    传递性:对于任何非空的引用值x,y,z,如果x.equals(y)返回true，y.equals(z)返回true，那么x.equals(z)返回true
    一致性:对于任何非空的引用值x,y,对于没有修改值的情况下，多次调用x.equals(y)应该返回同样的结果
    对于所有非空的应用x,x.equals(null)必须返回false
    
    
    如果缺少这个类型检查，并且equals方法传递了一个错误类型的参数，那么equals方法将抛出一个ClassCastException，这违反了equals契约。
    但是instanceof操作符被指定为如果它的第一个操作数为null，则返回false，而不管第二个操作数[JLS, 15.20.2]中出现的是什么类型。
    
    一般写出一个好的equals方法需要遵守以下几点；
      * 如果被比较的对象是当前类的引用，可以使用==来校验，如果是的话，返回true，在比较代价比较大的时候，这一步操作是值得的
      * 使用 instanceof 来检查参数是否具有正确的类型，不是返回false
      * 将参数转换为正确的类型
      * 对于对象中每一个有意义的属性，都和参数中对象中相应的属性进行是否相等的判断比较，全部相等返回true，否则false
      
  11.当重写equals方法时，一定要重写hashCode方法
    如果不这样做，当使用到集合类的工具时，会出现错误的表现
    大概有以下三个一致的规范：
    * 当hashCode在同一个应用被对象多次重复调用时，在对象没有被改变值的情况下，每次应该返回相同的值，但是在应用不同的执行期间，不需要保持一致
    * 如果两个对象equals方法返回true的话，那么两个对象的hashcode方法应该返回相同的值
    * 如果两个对象equals返回false的话，不强制要求hashCode一定是不相同或相同，但是提供不同的值是可以提供对象的散列性能的
    
    一个好的hash方法会给不同的实例提供不同的哈希值，有一个简单的方法,分三步：
    * 定义一个result字段，将它初始化为第一个有意义字段的哈希值
    * 对剩余的所有有意义的字段按一下顺序逐个执行
      a:--计算一个属性的哈希值c
        a.1如果这个字段f是原始类型，调用它的包装类的Type.hashCode(f)方法,
        a.2如果字段是对象引用，并且这个对象的equals方法是通过递归调用比较的，那么递归调用每个字段上的hashCode方法，如果是更复杂的对象比较，
           则为该字段计算一个“规范表示”，并在规范表示上调用hashCode。如果字段的值为null，则使用0(或其他常数，但0是传统的)。
        a.3如果这个字段是个数组，那么对于每一个有意义的元素都是需要处理的，使用上一步的方式计算每一个元素的哈希值。如果数组中没有任何有意义的值，
          可以返回一个常量值（最好是非0）,如果数组中都是有意义的元素，可以是使用Arrays.hashCode(f[])对应参数的方法;
      b:合并每个字段的哈希值c到result，通过下面的公式
        result = 31 * result + c;
    * 返回最终的result
    
  12、总是覆盖toString方法
    在您编写的每个实例化类中重写Object的toString实现，除非超类已经这样做了。它使类更易于使用，并有助于调试。
    toString方法应该以美观的格式返回对象的简明、有用的描述。
    
  13、谨慎的覆盖clone方法
    
   // Copy constructor
   public Yum(Yum yum) { ... };
    A copy factory is the static factory (Item 1) analogue of a copy constructor:
   // Copy factory
   public static Yum newInstance(Yum yum) { ... };
   与Cloneable/clone相比，copy构造函数方法及其静态工厂变体有许多优点:它们不依赖于有风险倾向的超语言对象创建机制;
   他们不要求无法强制遵守几乎没有记录的约定;它们与正确使用final字段没有冲突;它们不会抛出不必要的检查异常;而且不需要转换。
   
   考虑到与Cloneable相关的所有问题，新的接口不应该扩展它，新的可扩展类不应该实现它。虽然实现Cloneable对最终类的危害较小，但这应该被看作是一种性能优化，
   只有在极少数情况下才需要这样做(第67项)。通常，复制功能最好由构造函数或工厂提供。此规则的一个重要例外是数组，最好使用克隆方法复制它。
   
   14、考虑实现comparable接口
   总之，无论何时实现具有合理排序的值类，都应该让该类实现Comparable接口，以便能够轻松地对其实例进行排序、搜索并在基于比较的集合中使用。在比较compareTo方法实现中的字段值时，要避免使用<和>操作符。
   相反，应该使用封装在原语类中的静态比较方法或比较器接口中的比较器构造方法。

   15、尽量减少类和成员的可访问性
   经验法则很简单:使每个类或成员尽可能不可访问。
   总而言之，您应该尽可能地减少程序元素的可访问性(在合理范围内)。在仔细设计了最小的公共API之后，您应该防止任何游离的类、接口或成员成为API的一部分。
   除了用作常量的公共静态final字段外，公共类应该没有公共字段。确保公共静态final字段引用的对象是不可变的。
   
   16、在public类中，使用接受器，不要使用public字段
   总之，公共类永远不应该公开可变字段。公共类公开不可变字段的危害要小一些，但仍然存在问题。
   但是，有时需要包私有或私有嵌套类来公开字段，无论是可变的还是不可变的。
    
   17、减少可变性
   不可变类简单来说就是一个类的实例不可以被修改
   得到一个不变类，遵循以下5个原则
   * 不提供可以修改字段的方法
   * 确保类不可以被继承
   * 确保所有字段都是final的
   * 确保所有字段都是private的
   * 确保对任何可变组件的独占访问
   
   一个不可变类的例子：
   // Immutable complex number class public final class Complex { private final double re; private final double im;
    public Complex(double re, double im) {
        this.re = re;
        this.im = im;
    }
    public double realPart()      { return re; }
    public double imaginaryPart() { return im; }
    public Complex plus(Complex c) {
        return new Complex(re + c.re, im + c.im);
}
    public Complex minus(Complex c) {
        return new Complex(re - c.re, im - c.im);
}
    public Complex times(Complex c) {
        return new Complex(re * c.re - im * c.im,
                           re * c.im + im * c.re);
}
    public Complex dividedBy(Complex c) {
        double tmp = c.re * c.re + c.im * c.im;
        return new Complex((re * c.re + im * c.im) / tmp,
                           (im * c.re - re * c.im) / tmp);
}
    @Override public boolean equals(Object o) {
       if (o == this)
           return true;
       if (!(o instanceof Complex))
           return false;
       Complex c = (Complex) o;
// See page 47 to find out why we use compare instead of == return Double.compare(c.re, re) == 0
           && Double.compare(c.im, im) == 0;
    }
    @Override public int hashCode() {
        return 31 * Double.hashCode(re) + Double.hashCode(im);
    }
    @Override public String toString() {
        return "(" + re + " + " + im + "i)";
} }

  18、组合优先于继承
  在包中使用继承是安全的，在包中子类和超类实现由相同的程序员控制。在扩展为扩展而专门设计和记录的类时，使用继承也是安全的
  与方法调用不同，继承违反了封装
  继承只适用于子类确实是超类的子类型的情况。换句话说，只有当两个类之间存在“is-a”关系时，B类才应该扩展a类。
  总而言之，继承是强大的，但它是有问题的，因为它违反了封装。只有当子类和超类之间存在真正的子类型关系时，它才是合适的。
  即使这样，如果子类与超类在不同的包中，而超类不是为继承而设计的，继承也可能导致脆弱性。
  为了避免这种脆弱性，使用组合和转发而不是继承，特别是在存在实现包装类的适当接口时。包装器类不仅比子类更健壮，而且更强大。
 
  19.设计继承时需要文档话，否则禁止使用它
  测试为继承而设计的类的惟一方法是编写子类。
  总之，为继承设计类是一项艰巨的工作。您必须记录它的所有自我使用模式，并且一旦您记录了它们，您就必须在整个类的生命周期中致力于它们。
  如果不这样做，子类可能会依赖于超类的实现细节，如果超类的实现发生变化，子类可能会中断。
  为了允许其他人编写高效的子类，您可能还必须导出一个或多个受保护的方法。除非您知道确实需要子类，否则最好通过声明类final或确保没有可访问的构造函数来禁止继承。
  
  20.优先使用接口再考虑抽象类
  可以很容易地对现有类进行改造，以实现新的接口。
  接口是定义混合的理想方式
  接口允许构造非分层类型框架。
  接口通过包装每个类的习惯用法支持安全、强大的功能增强
  
  21、为后代设计接口
  java8接口支持默认方法实现
  在存在默认方法的情况下，接口的现有实现可能在编译时没有错误或警告，但在运行时失败。
  虽然这个问题并不常见，但也不是孤立的事件。已知Java 8中添加到集合接口的大量方法是易受影响的，已知有少量现有实现受影响。
  
  22、接口只用来定义类型
  当一个类实现了一个接口，这个接口可以作为一个类型，并作为实现它的类实例的引用。
  因此，若一个类实现了一个接口，则表明了客户端可以如何处理该类的实例。为其它目的来定义一个接口是不合适的。
  通过常量接口模式来使用接口是很糟糕的。会暴露类的常量的细节，同时也会污染接口的实现类
  总之，接口应该只被用来定义类型。它们不能仅仅是用来导出常量。

  23、优先考虑类层次结构，避免使用标签类
  这些类里包含了混乱的模板代码，包括枚举声明，标签域，还有switch语句。可阅读性被严重破坏，因为多个实现都被塞进同一个类里了。
  由于标签类的实例负担着许多属于不同风格的不相关域，内存占用也随着增加。
  除非不同构造器初始化的域是不相关的，否则这些域不能设成final，而这又会导致更多的模板代码。
  构造器必须设置标签域，而且要在没有编译器的帮助下去初始化正确的数据域：如果你初始化的域错了，程序将会在运行时失败。
  除非你去修改源文件，否则你无法再往标签类里添加风格。如果你确实需要添加新的风格，那么你必须要记住，每个switch语句都要添加新的case分支，否则类在运行时会失败。
  最后，我们无法从实例的数据类型看出它是属于哪个风格。简而言之，标签类不仅冗长，容易出错，而且效率也不高。
  总之，标记类很少是合适的。如果您想编写具有显式标记字段的类，请考虑是否可以删除标记并使用层次结构替换类。
  当您遇到具有标记字段的现有类时，请考虑将其重构为层次结构。

  24.优先考虑静态成员类，后考虑非静态
  嵌套类是在另一个类中定义的类。一个嵌套的类应该只存在于它的封闭类中。
  如果一个嵌套类在其他上下文中有用，那么它应该是一个顶级类。有四种嵌套类:静态成员类、非静态成员类、匿名类和本地类（局部类）。
  除了第一类之外，所有的类都称为内部类
  如果声明不需要访问封闭实例的成员类，则始终将静态修饰符放在其声明中，使其成为静态成员类而不是非静态成员类。
  如果省略此修饰符，则每个实例都有一个与其封闭实例无关的隐藏引用。如前所述，存储这个引用需要时间和空间。
  更严重的是，它可能会导致封闭实例被保留，而它本来有资格进行垃圾收集(第7项)。它通常很难检测到，因为引用是不可见的。
  
  25、将源文件限制为单个顶级类
  永远不要将多个顶级类或接口放在单个源文件中。遵循这一规则可以保证您在编译时不会有一个类的多个定义。
  这反过来又保证了编译生成的类文件，以及产生的程序的行为，是独立于源文件传递给编译器的顺序的。
  
泛型
  26、不要使用原始类型
  加入泛型后，应该是用List<String>包含指定类型的泛型，不要使用List.
  对于不应该使用原始类型这条规则，有两个小例外。你必须在类字面值中使用原始类型
  第二个例外则与instanceof操作符有关
  
  27、消除未检查警告
  有些警告会很难消除。当你遇到一些需要思考的警告时，请不要就此放弃消除！要尽可能消除每一个非检查警告。如果你消除了所有的警告，就可以确保你的代码是类型安全的，这是一件非常好的事。
  这意味着在程序运行时你不会遇到ClassCastException异常，而且你会更加自信你的程序可以实现预期的功能。
  
  如果你无法消除某个警告，但你能证明引起这个警告的代码是类型安全的话，那么这时候（也只有这时候）可以用@SuppressWarnings("unchecked")注解来禁止这个警告。
  如果你在没有事先证明代码是类型安全的情况下就禁止了警告，那么你就给了自己代码是安全的错误感觉。
  也许这么做之后在编译代码时不会出现任何警告，但它仍可以在运行时抛出ClassCastException异常。
  然而，如果你忽略了（注意，是忽略，不是禁止）那些你知道认为是安全的未检查警告，那么当出现一个真的有问题的警告时你也不会发现。
  新的警告将会淹没在那些你没有禁止掉的错误警告里。
  
  SuppressWarnings注解可以在任意声明上使用，从单独的局部变量到整个类都可以。
  应该在尽可能小的作用域上使用SuppressWarnings注解。它通常是个变量声明或者是一个非常短的方法或者是构造器。
  永远不要在整个类上使用SuppressWarnings注解，这么做会掩盖某些重要的警告。
  
  总之，未经检查的警告非常重要。不要忽视他们。每个未检查的警告都表示运行时可能出现ClassCastException异常。
  尽量消除这些警告。如果无法消除未检查的警告，并且可以证明引发该警告的代码是类型安全的，则使用@SuppressWarnings(“未检查的”)注释在最窄的范围内取消该警告。
  在评论中记录下你决定取消警告的理由。
  
  28、列表优于数组
  数组与泛型类型有两个重要的区别。首先，数组是协变的。这个听起来很吓人的单词的意思是，如果Sub是Super的子类型，那么数组类型Sub[]就是数组类型Super[]的子类型。
  相比之下，泛型是不变的:对于任何两种不同的类型Type1和Type2, List<Type1>既不是List<Type2>的子类型，也不是List<Type2>的超类型[JLS, 4.10;Naftalin07, 2.5]。
  您可能认为这意味着泛型是有缺陷的，但其实数组是有缺陷的
  数组的使用，如果类型错误，只能在运行时暴露，泛型的列表则会在编译器暴露
  
  总之，数组和泛型具有非常不同的类型规则。数组是协变和具体化的;泛型是不变的和擦除的。因此，数组提供了运行时类型安全，但不提供编译时类型安全，泛型也不提供编译时类型安全。
  通常，数组和泛型不能很好地混合。如果您发现自己混合了它们并得到编译时错误或警告，那么您的第一个冲动应该是用列表替换数组。
  
  29、优先考虑泛型类型
  总之，泛型类型比客户端代码中需要强制转换的类型更安全、更易于使用。在设计新类型时，请确保可以在不使用这种类型转换的情况下使用它们。
  这通常意味着使类型成为泛型。如果有任何现有的泛型类型，但是没有泛型，那么对它们进行泛型。这将使这些类型的新用户的生活更容易，而不会破坏现有的客户端(项目26)。
  
  30、优先使用泛型方法
  总而言之，泛型方法就像泛型类型，比起那些要求客户端将参数及返回值进行显示强转的方法，它们更安全更简单。
  就像类型一样，你应该保证你的方法不用强转就能用，这意味着要将这些方法泛型化，你也应该将现有方法泛型化，让新用户用起来更简单，而且不用破坏现有客户端（条目26）。
  
  31、使用有界通配符来增加API的灵活性
  因为参数化类型是不可变的，不可变类型不足以为我们提供足够的灵活性
  
  例：
  // Wildcard type for a parameter that serves as an E producer 
  public void pushAll(Iterable<? extends E> src) {
       for (E e : src)
           push(e);
  }
  // Wildcard type for parameter that serves as an E consumer
  public void popAll(Collection<? super E> dst) {
    while (!isEmpty())
        dst.add(pop()); 
  }
  PECS代表生产者延伸，超级消费者。换句话说，如果参数化类型表示一个T生成器，则使用<?extends T >;如果它表示一个T消费者，使用<?超级T >。
  在我们的堆栈示例中，pushAll的src参数生成了供堆栈使用的E实例，因此src的适当类型是Iterable<? extends E >;
  popAll的dst参数使用来自堆栈的E个实例，因此dst的合适类型是Collection<? super E >。PECS助记符捕获了指导通配符类型使用的基本原则。
  Naftalin和Wadler称之为Get and Put原则[Naftalin07, 2.4]。

  总之，在api中使用通配符类型虽然很复杂，但却使api更加灵活。如果您编写一个将被广泛使用的库，应该认为必须正确使用通配符类型。
  记住基本规则:生产者-extends，消费者-supper(PECS)。还请记住，所有可比较对象和比较器都是消费者。
  
  32、明智地组合泛型和可变参数
  在Java 5中，varargs方法(第53项)和泛型都被添加到平台中，所以您可能希望它们能够优雅地交互;不幸的是，他们没有。
  varargs的目的是允许客户端向方法传递可变数量的参数，但是它是一个有漏洞的抽象:当您调用varargs方法时，会创建一个数组来保存varargs参数;
  该数组是可见的，它应该是一个实现细节。因此，当varargs参数具有泛型或参数化类型时，会出现混淆的编译器警告。
  
  总之，varargs和泛型不能很好地交互，因为varargs功能是在数组之上构建的一个有漏洞的抽象，而数组与泛型具有不同的类型规则。
  虽然泛型变量参数不是类型安全的，但它们是合法的。如果您选择使用泛型(或参数化)varargs参数来编写方法，
  那么首先要确保该方法是类型安全的，然后使用@SafeVarargs对其进行注释可变参数，所以它不是不愉快的使用。

  33.考虑类型安全异构容器
  比如，数据库的某一行会有任意多列，如果能用一种类型安全的方式去访问这些列就再好不过了。幸运的是，有个简单的办法可以做到这点。
  这个办法就是，将键参数化，而不是容器。
  然后将参数化了的键提交给容器去插入或者获取一个值。用泛型类型系统来保证值的类型与值对应的键的类型相符。
  
  考虑一个类，它叫Favorites，该类允许它的客户端存储和获取任意类型的favorite实例。
  某类型的Class对象将是参数化键的一部分。之所以可以这么做，是因为Class类是泛型的。
  从字面上来说，类的类型不是简单的Class，而是Class<T>。例如，String.class的类型为Class<String>，Integer.class的类型是Class<Integer>。
  当一个类的字面文字被传入方法来表达运行时和编译时的类型信息时，它就被称为类型令牌（type token）
  // Typesafe heterogeneous container pattern - API
public class Favorites {
    public <T> void putFavorite(Class<T> type, T instance);
    public <T> T getFavorite(Class<T> type);
}
  Favorites实例是类型安全的：当你请求一个String时，它永远不会返回个Integer给你。
  同时它也是异构的：不像普通的map，它里面的所有键都是不同类型的。
  因而，我们把Favorites类称为类型安全的异构容器。Favorites类的实现非常简单。

  // Typesafe heterogeneous container pattern -implementation
public class Favorites {
    private Map<Class<?>, Object> favorites = new HashMap<>();
    public <T> void putFavorite(Class<T> type, T instance) {
        favorites.put(Objects.requireNonNull(type), instance);
    } 
    public <T> T getFavorite(Class<T> type) {
        return type.cast(favorites.get(type));
    }
}

  34、用枚举替代int常量
  幸运的是，有一种更好的方法可以将不同的行为与每个enum常量关联起来:
  在enum类型中声明一个抽象的apply方法，然后在特定于常量的类主体中为每个常量使用一个具体的方法来覆盖它。这种方法被称为常量特定的方法实现:
  // Enum type with constant-specific method implementations
  public enum Operation {
      PLUS {publicdoubleapply(doublex,doubley){returnx+y;}}, MINUS {public double apply(double x, double y){return x - y;}}, TIMES {public double apply(double x, double y){return x * y;}}, DIVIDE{public double apply(double x, double y){return x / y;}};
      public abstract double apply(double x, double y);
   }
   
  策略模式的枚举
   // The strategy enum pattern
   enum PayrollDay {
       MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY,
       SATURDAY(PayType.WEEKEND), SUNDAY(PayType.WEEKEND);
       private final PayType payType;
       PayrollDay(PayType payType) { this.payType = payType; }
       PayrollDay() { this(PayType.WEEKDAY); }  // Default
       int pay(int minutesWorked, int payRate) {
           return payType.pay(minutesWorked, payRate);
}
       // The strategy enum type
       private enum PayType {
           WEEKDAY {
               int overtimePay(int minsWorked, int payRate) {
                   return minsWorked <= MINS_PER_SHIFT ? 0 :
                     (minsWorked - MINS_PER_SHIFT) * payRate / 2;
} },
           WEEKEND {
               int overtimePay(int minsWorked, int payRate) {
                   return minsWorked * payRate / 2;
               }
};
           abstract int overtimePay(int mins, int payRate);
           private static final int MINS_PER_SHIFT = 8 * 60;
           int pay(int minsWorked, int payRate) {
               int basePay = minsWorked * payRate;
               return basePay + overtimePay(minsWorked, payRate);
} }
}
  总之，枚举类型相对于int常量的优势是引人注目的。枚举更具可读性、更安全、更强大。许多枚举不需要显式的构造函数或成员，但其他枚举则可以从将数据与每个常量关联并提供其行为受该数据影响的方法中获益。很少有枚举能从将多个行为关联到一个方法中获益。
  在这种比较少见的情况下，最好使用特定于常量的方法，而不要使用那些打开自己值的枚举。如果某些枚举常量(但不是所有)具有相同的行为，请考虑策略枚举模式。
  
  35、使用实例字段而不是序号
  幸运的是，这些问题有一个简单的解决方案。决不要从枚举的序数派生与枚举相关的值;将它存储在一个实例字段:
  
   public enum Ensemble {
       SOLO(1), DUET(2), TRIO(3), QUARTET(4), QUINTET(5),
       SEXTET(6), SEPTET(7), OCTET(8), DOUBLE_QUARTET(8),
       NONET(9), DECTET(10), TRIPLE_QUARTET(12);
        private final int numberOfMusicians;
        Ensemble(int size) { this.numberOfMusicians = size; } public int numberOfMusicians() { return numberOfMusicians; }
        }
  Enum规范对序数有这样的描述:“大多数程序员不会使用这种方法。它被设计用于通用的基于枚举的数据结构，如EnumSet和EnumMap。
  除非您正在用这个字符编写代码，否则最好完全避免使用序号方法。
  
  36、使用EnumSet而不是位字段
  总之，仅仅因为一个枚举类型将在集合中使用，就没有理由用位字段来表示它。
  EnumSet类结合了bit字段的一致性和性能，以及项目34中描述的枚举类型的所有优点。
  EnumSet的一个真正缺点是，与Java 9一样，它不可能创建不可变的EnumSet，但这可能会在即将发布的版本中得到纠正。同时，可以用集合包装EnumSet。
  不可修改，但简洁性和性能将受到影响。
